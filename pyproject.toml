[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fraud-detection-system"
version = "1.0.0"
description = "Advanced AI-powered fraud detection system for phone numbers"
authors = ["Fraud Detection Team <team@fraud-detection.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/NitinBot001/fraud-detection-system"
repository = "https://github.com/NitinBot001/fraud-detection-system"
documentation = "https://fraud-detection-docs.readthedocs.io"
keywords = ["fraud", "detection", "ai", "machine-learning", "phone", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.9"
# Web Framework
Flask = "^3.0.3"
Flask-CORS = "^4.0.1"
Flask-JWT-Extended = "^4.6.0"
Flask-Limiter = "^3.8.0"
Flask-Login = "^0.6.3"
Flask-SocketIO = "^5.3.6"

# Database
SQLAlchemy = "^2.0.32"
psycopg2-binary = "^2.9.9"

# Async and Event Loop
asyncio-mqtt = "^0.16.2"
uvloop = "^0.19.0"

# Caching
redis = "^5.0.8"

# Machine Learning
scikit-learn = "^1.5.1"
numpy = "^1.26.4"
pandas = "^2.2.2"
joblib = "^1.4.2"

# Network Analysis
networkx = "^3.3"
python-louvain = "^0.16"
scipy = "^1.14.0"

# Phone Number Processing
phonenumbers = "^8.13.42"

# Security
bcrypt = "^4.2.0"
cryptography = "^43.0.0"
PyJWT = "^2.9.0"
python-magic = "^0.4.27"

# HTTP Client
aiohttp = "^3.10.3"

# System Monitoring
psutil = "^6.0.0"

# Timezone
pytz = "^2024.1"

# Environment Variables
python-dotenv = "^1.0.1"

# Logging
structlog = "^24.4.0"

# Additional utilities
ipaddress = "^1.0.23"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

# Code Quality
black = "^24.8.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
mypy = "^1.11.1"
pre-commit = "^3.8.0"

# Documentation
sphinx = "^7.4.7"
sphinx-rtd-theme = "^2.0.0"

# Security scanning
bandit = "^1.7.9"
safety = "^3.2.7"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "config", "tests"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --cov=app --cov-report=html --cov-report=term-missing"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "uvloop.*",
    "phonenumbers.*",
    "psutil.*",
    "networkx.*",
    "community.*",
    "magic.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/config/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]

[tool.poetry.scripts]
fraud-detect = "main:main"
migrate = "migrations.create_tables:main"
seed-data = "migrations.seed_data:main"
